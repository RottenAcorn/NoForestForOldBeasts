//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/ControlActionsConfig.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlActionsConfig: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    private static @ControlActionsConfig _instance = new @ControlActionsConfig();
    private @ControlActionsConfig(bool loadDefault = false)
    {
        if(loadDefault)
        asset = InputActionAsset.FromJson(ConfigFromJsonFile(false));
        else
        asset = InputActionAsset.FromJson(ConfigFromJsonFile(true));
        // pc
        m_pc = asset.FindActionMap("pc", throwIfNotFound: true);
        m_pc_Move = m_pc.FindAction("Move", throwIfNotFound: true);
        m_pc_Aim = m_pc.FindAction("Aim", throwIfNotFound: true);
        m_pc_SwapAimType = m_pc.FindAction("SwapAimType", throwIfNotFound: true);
    }

    public static @ControlActionsConfig Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = new ControlActionsConfig();
            }
            return _instance;
        }
    }

    private string ConfigFromJsonFile(bool loadDefault)
    {
        if (!loadDefault)
        return Resources.Load<TextAsset>(nameof(ControlActionsConfig)).text;
        else
        return Resources.Load<TextAsset>(nameof(ControlActionsConfig) + "_defaults").text;
    }

    public void ModifyActionBinding(string actionMapName, string actionName, string oldBinding, string newBinding)
    {
        InputActionMap actionMap = asset.FindActionMap(actionMapName);
        InputAction action = actionMap.FindAction(actionName);
        int bindingIndex = action.bindings.IndexOf(x => x.effectivePath == oldBinding);
        if (bindingIndex == -1)
            return;
        action.ChangeBinding(bindingIndex).WithPath(newBinding);
        var json = asset.ToJson();
        System.IO.File.WriteAllText($"Assets/Resources/{nameof(ControlActionsConfig)}.json", json);
    }

    public void loadDefault()
    {
        _instance = new @ControlActionsConfig(true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // pc
    private readonly InputActionMap m_pc;
    private List<IPcActions> m_PcActionsCallbackInterfaces = new List<IPcActions>();
    private readonly InputAction m_pc_Move;
    private readonly InputAction m_pc_Aim;
    private readonly InputAction m_pc_SwapAimType;
    public struct PcActions
    {
        private @ControlActionsConfig m_Wrapper;
        public PcActions(@ControlActionsConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_pc_Move;
        public InputAction @Aim => m_Wrapper.m_pc_Aim;
        public InputAction @SwapAimType => m_Wrapper.m_pc_SwapAimType;
        public InputActionMap Get() { return m_Wrapper.m_pc; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PcActions set) { return set.Get(); }
        public void AddCallbacks(IPcActions instance)
        {
            if (instance == null || m_Wrapper.m_PcActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PcActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @SwapAimType.started += instance.OnSwapAimType;
            @SwapAimType.performed += instance.OnSwapAimType;
            @SwapAimType.canceled += instance.OnSwapAimType;
        }

        private void UnregisterCallbacks(IPcActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @SwapAimType.started -= instance.OnSwapAimType;
            @SwapAimType.performed -= instance.OnSwapAimType;
            @SwapAimType.canceled -= instance.OnSwapAimType;
        }

        public void RemoveCallbacks(IPcActions instance)
        {
            if (m_Wrapper.m_PcActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPcActions instance)
        {
            foreach (var item in m_Wrapper.m_PcActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PcActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PcActions @pc => new PcActions(this);
    public interface IPcActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnSwapAimType(InputAction.CallbackContext context);
    }
}
